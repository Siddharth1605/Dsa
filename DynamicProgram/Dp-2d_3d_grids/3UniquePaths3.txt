class Solution {
public:
    int fun(vector<vector<int>> &obstacleGrid, int i, int j, vector<vector<int>> &dp)
    {
        if(i<0 || j<0)  return 0;
        if(obstacleGrid[i][j] == 1)    return 0;
        if(i == 0 && j == 0)    return 1;
        if(dp[i][j] != -1)  return dp[i][j];

        int l = fun(obstacleGrid, i-1, j, dp);
        int r = fun(obstacleGrid, i, j-1, dp);
        return  dp[i][j] = l+r; 
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size(); 
        int m = obstacleGrid[0].size();

        vector<vector<int>> dp(n, vector<int>(m,-1));

        if( (obstacleGrid[n-1][m-1] == 1) || (obstacleGrid[0][0] == 1) )   return 0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==0 && j==0)    {dp[i][j] = 1;}
                else if(obstacleGrid[i][j] == 1) {dp[i][j] = 0;}
                else
                {
                    int l = 0;
                    int r = 0;
                    if(i>0) l = dp[i-1][j];
                    if(j>0) r = dp[i][j-1];
                    dp[i][j] = l+r;
                }
                
            }
        }
        return dp[n-1][m-1];
    }
};