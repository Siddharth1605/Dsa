class Solution {
public:
    int fun(int i, int j, vector<vector<int>> &grid, vector<vector<int>> &dp)
    {
        if(i == 0 && j == 0)    return grid[0][0];
        if(i < 0 || j < 0)    return 1000;
        if(dp[i][j] != -1)  return dp[i][j];
        int d = grid[i][j] +  fun(i-1, j, grid, dp);
        int l = grid[i][j] +  fun(i, j-1 ,grid, dp);

        return dp[i][j] = min(d, l);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m , -1));
        dp[0][0] = grid[0][0];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i == 0 && j == 0)    continue;
                int d = 1000;
                int l = 1000;
                if(i>0) d = grid[i][j] + dp[i-1][j];
                if(j>0) l = grid[i][j] + dp[i][j-1];

                dp[i][j] = min(l, d);
            }
        }
        return dp[n-1][m-1];
    }
};