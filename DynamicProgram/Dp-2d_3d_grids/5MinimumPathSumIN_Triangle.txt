class Solution {

    public int minimumTotal (List<List<Integer>> triangle) {
        //return triangle.get(0).get(0);
        int n = triangle.size();
        int dp[][] = new int[n][n];
        
        for(int i=0;i<n;i++)
            dp[n-1][i] = triangle.get(n-1).get(i);

        for(int i=n-2;i>=0;i--)
        {
            for(int j=i;j>=0;j--)
            {
                int l = triangle.get(i).get(j) + dp[i+1][j];
                int r = triangle.get(i).get(j) + dp[i+1][j+1];

                dp[i][j] = Math.min(l, r);
            }
        }
        return dp[0][0];
    } 
    public int fun(int i, int j, List<List<Integer>> triangle, int[][] dp)
    {
        if(i>=triangle.size() || j > i) return 0;
        if(i == triangle.size() - 1)    return triangle.get(i).get(j);

        if(dp[i][j] != -1)  return dp[i][j];

        int l = triangle.get(i).get(j) + fun(i+1, j, triangle, dp);
        int r = triangle.get(i).get(j) + fun(i+1, j+1, triangle, dp);

        return dp[i][j] =  Math.min(l, r);
    }
}