class Solution {
public:
    int fun(int i, int b, vector<int> &prices, vector<vector<int>> &dp)
    {
        if(i == prices.size())  return 0;
        if(dp[i][b] != -1)  return dp[i][b];
        int profit = 0;
        if(b)   //already sold
        {
            int l = fun(i+1, 0, prices, dp) - prices[i];
            int r = fun(i+1, 1, prices, dp);
            profit = max(l, r);
        }
        else    //already bought
        {
            int l = fun(i+1, 1, prices, dp) + prices[i];
            int r = fun(i+1, 0, prices, dp);
            profit = max(l,r);
        }
        return dp[i][b] = profit;
    }
    int maxProfit(vector<int>& prices) {

        int n = prices.size();
        vector<vector<int>> dp(n+1, vector<int>(2,-1));

        dp[n][0] = dp[n][1] = 0;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=0;j<=1;j++)
            {
                int p = 0;
                if(j == 0)
                {
                    int l = dp[i+1][1] - prices[i];
                    int r = dp[i+1][0];
                    p = max(l, r);
                }
                if(j == 1)
                {
                    int l = dp[i+1][0] + prices[i];
                    int r = dp[i+1][1];
                    p = max(l, r);
                }

                dp[i][j] = p;
            }
        }
        return dp[0][0];
    }
};