class Solution {
public:
    int fun(int i, int b, int c, vector<int> &prices, vector<vector<vector<int>>> &dp)
    {
        if(i == prices.size() || c == 0)    return 0;
        int p = 0;
        if(dp[i][b][c] != -1)   return dp[i][b][c];
        if(b == 1) //starting or just sold
        {
            int l = fun(i+1, 0, c, prices, dp) - prices[i];
            int r = fun(i+1, 1, c, prices, dp);
            p = max(l, r);
        }
        else //just bought 
        {
            int l = fun(i+1, 1, c-1, prices, dp) + prices[i];
            int r = fun(i+1, 0, c, prices, dp);
            p = max(l, r);
        }
        return dp[i][b][c] = p;
    }   
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, 0)));

        int profit = 0;
        for(int i=n-1;i>=0;i--)
        {
            for(int buy = 0; buy<=1;buy++)
            {
                for(int c=1;c<=2;c++)
                {
                    if(buy == 0)    //we can buy,we just sold or we just start
                    {
                        int l = dp[i+1][1][c] - prices[i];
                        int r = dp[i+1][0][c];

                        profit = max(l,r);
                    }
                    if(buy == 1)
                    {
                        int l = dp[i+1][0][c-1] + prices[i];
                        int r = dp[i+1][1][c];

                        profit = max(l,r);
                    }
                    dp[i][buy][c] = profit;
                }
            }
        }

        return dp[0][0][2];
    }
};