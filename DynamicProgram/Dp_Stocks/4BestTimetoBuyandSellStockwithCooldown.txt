class Solution {
public:
    int fun(int i, int buy, vector<int> &prices, vector<vector<int>> &dp)
    {
        if(i >= prices.size())  return 0;

        if(dp[i][buy] != -1)    return dp[i][buy];
        int profit = 0;
        if(buy == 1)
        {
            profit = max(fun(i+1, 0, prices, dp)-prices[i], fun(i+1, 1, prices, dp));
        }
        else
        {   
            profit = max(fun(i+2, 1, prices, dp) + prices[i], fun(i+1, 0, prices, dp));
        }
        return dp[i][buy] = profit;
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+2, vector<int>(2, 0));

        for(int i=n-1;i>=0;i--)
        {
            for(int buy = 0;buy<=1;buy++)
            {
                if(buy == 0)
                {
                    dp[i][buy] = max(dp[i+1][1] - prices[i], dp[i+1][0]);
                }
                else if(buy == 1)
                {
                    dp[i][buy] = max(dp[i+2][0] + prices[i], dp[i+1][1]);
                }
            }
        }
        return dp[0][0];
    }
};