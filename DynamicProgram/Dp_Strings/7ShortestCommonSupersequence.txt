class Solution {
public:
    int fun(int i, int j, string a, string b)
    {
        if(i == 0 || j==0)  return 0;

        if(a[i-1] == b[j-1])    return 1 +  fun(i-1, j-1, a, b);
        else    return max(fun(i-1, j, a, b), fun(i, j-1, a, b));
    }
    string shortestCommonSupersequence(string a, string b) {
        int n = a.length();
        int m = b.length();

        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));

        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(a[i-1] == b[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }

        int len = dp[n][m];

        int i = n;
        int j = m;
        string s = "";
        while(i>0 && j>0)
        {
            if(a[i-1] == b[j-1])
            {
                s += a[i-1];
                i--;
                j--;
            }
            else if (dp[i - 1][j] > dp[i][j - 1]) 
            {
                s += a[i-1];
                i--;
            }
            else
            {
                s += b[j-1];
                j--;
            }
        }

        while(i>0)
        {
            s+=a[i-1];
            i--;
        }
        while(j>0)
        {
            s += b[j-1];
            j--;
        }

        reverse(s.begin(), s.end());
        return s;
        
    }
};