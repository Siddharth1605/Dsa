class Solution {
public:
    bool fun(int i, int k, vector<int> &nums, vector<vector<int>> &dp){
        if(k == 0)  return true;
        if(i == 0)  return nums[0] == k;

        if(dp[i][k] != -1)  return dp[i][k];

        bool ntake = fun(i-1, k, nums, dp);
        bool take = false;
        if(k>=nums[i])  take = fun(i-1, k-nums[i], nums, dp);

        return dp[i][k] = take || ntake;
    }
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int s = 0;
        for(int i=0;i<n;i++)    s+=nums[i];
        if(s%2 == 1)    return false;
        int t = s/2;
        vector<vector<bool>> dp(n, vector<bool>(t+1, false));
        
        for(int i=0;i<n;i++)    dp[i][0] = true;

        if(nums[0] <= t)
        dp[0][nums[0]] = true;

        for(int i=1;i<n;i++)
        {
            for(int k=1;k<=t;k++)
            {
                bool ntake = dp[i-1][k];
                bool take = false;
                if(k>=nums[i]) take = dp[i-1][k-nums[i]];
                dp[i][k] = take || ntake;
            }
        }
        return dp[n-1][t];
    }
};