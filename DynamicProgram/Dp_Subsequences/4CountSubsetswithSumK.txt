int fun(vector<int> &arr, int i, int t, vector<vector<int>> &dp)
{
	if(t == 0)	return 1;
	if(i == 0)	
	{
		return (arr[i] == t);
	}
	if(dp[i][t] != -1)	return dp[i][t];
	int nt = fun(arr, i-1, t, dp);
	int tk = 0;
	if(t>=arr[i])	tk = fun(arr, i-1, t-arr[i], dp);

	return dp[i][t] = tk+nt;
}
int findWays(vector<int>& arr, int k)
{
	// Write your code here.
	int n = arr.size();
	vector<vector<int>> dp(n, vector<int>(k+1, 0));
	
	for(int i=0;i<n;i++)	dp[i][0] = 1;
	if(arr[0] <= k)	dp[0][arr[0]] = 1;

	for(int i=1;i<n;i++)
	{
		for(int t=1;t<=k;t++)
		{
			int take = 0;
			int nt = dp[i-1][t];
			if(t>=arr[i])	take = dp[i-1][t-arr[i]];

			dp[i][t] = take + nt;
		}
	}
	return dp[n-1][k];
}
