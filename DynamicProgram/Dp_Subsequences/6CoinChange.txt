class Solution {
public:
    int fun(vector<int> coins, int t, int i, vector<vector<int>> &dp)
    {
        if(i == 0)
        {
            if(t % coins[i] == 0)   return t/coins[i];
            return 1e9;
        }
        if(dp[i][t] != -1)  return dp[i][t];

        int take = 1e9;
        if(t >= coins[i])   take = 1 + fun(coins, t-coins[i], i, dp);
        int ntake = fun(coins, t, i-1, dp);

        return dp[i][t] = min(take, ntake);
    }
    int coinChange(vector<int>& coins, int t) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int>(t+1, 0));

        for(int i=0;i<=t;i++)
        {
            if(i % coins[0] == 0)   dp[0][i] = i/coins[0];
            else    dp[0][i] = 1e9;
        }
        
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<=t;j++)
            {
                int take = 1e9;
                int ntake = 0 + dp[i-1][j];
                if(j>=coins[i]) take = 1 + dp[i][j-coins[i]];
                dp[i][j] = min(take, ntake);
            }
        }
        int ans = dp[n-1][t];
        if(ans >= 1e9) return -1;
        return ans;
    }
};