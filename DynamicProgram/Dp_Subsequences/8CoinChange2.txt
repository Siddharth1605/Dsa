class Solution {
public:
    int fun(int i, int t, vector<int> &coins, vector<vector<int>> &dp)
    {
        if(i == 0)
        {
            if(t%coins[i] == 0) return 1;
            return 0;
        }
        if(dp[i][t] != -1)  return dp[i][t];
        int take = 0;
        int ntake = fun(i-1, t, coins, dp);
        if(t >= coins[i])
            take = fun(i, t-coins[i], coins, dp);

        return dp[i][t] = take + ntake;
    }
    int change(int amount, vector<int>& coins) {
        int t = 0;
        int n = coins.size();
        
        vector<vector<int>> dp(n, vector<int>(amount+1, 0));
        for(int i=0;i<=amount;i++)
        {
            if(i%coins[0] == 0) dp[0][i] = 1;
        }

        for(int i=1;i<n;i++)
        {
            for(int j=0;j<=amount;j++)
            {
                int take = 0;
                int ntake = dp[i-1][j];
                if(j>=coins[i])
                    take = dp[i][j-coins[i]];

                dp[i][j] = take + ntake;
            }
        }
        return dp[n-1][amount];
    }
};