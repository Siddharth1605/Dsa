void maze(string p,int n, vector<vector<int>> &mat, int r, int c, vector<string> &ans,
 vector<vector<int>> &visitor)
{
    if(r == n-1 && c == n-1)    
    {
        ans.push_back(p);
        return;
    }

    //Down
    if(r<n-1 && visitor[r+1][c] == 0 && mat[r+1][c] == 1)
    {
        visitor[r][c] = 1;
        maze(p+"D", n, mat, r+1, c, ans, visitor);
        visitor[r][c] = 0;
    }
    
    //Left
    if(c>=1 && visitor[r][c-1] == 0 && mat[r][c-1] == 1)
    {
        visitor[r][c] = 1;
        maze(p+"L", n, mat, r, c-1, ans, visitor);
        visitor[r][c] = 0;
    }
    
    //Right
    if(c<n-1 && visitor[r][c+1] == 0 && mat[r][c+1] == 1)
    {
        visitor[r][c] = 1;
        maze(p+"R", n, mat, r, c+1, ans, visitor);
        visitor[r][c] = 0;
    }

    //Up
    if(r>=1 && visitor[r-1][c] == 0 && mat[r-1][c] == 1)
    {
        visitor[r][c] = 1;
        maze(p+"U", n, mat, r-1, c, ans, visitor);
        visitor[r][c] = 0;
    }    
}
vector<string> ratMaze(vector<vector<int>> &mat) {
    // Write your code here.
    int n = mat.size();
    vector<vector<int>> visitor(n,vector<int>(n,0));
    vector<string> ans;
    if(mat[0][0] == 1&& mat[n-1][n-1] ==1)
        maze("", n, mat, 0, 0, ans, visitor);
    return ans;
}